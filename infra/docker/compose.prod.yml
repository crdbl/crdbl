services:
  redis:
    image: redis:8-alpine
    container_name: crdbl-redis
    restart: unless-stopped
    command: >
      redis-server
        --appendonly yes
        --requirepass "${REDIS_PASSWORD}"
    volumes:
      - ./data/redis:/data
    expose:
      - '6379' # expose internally
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  ipfs:
    image: ipfs/kubo:latest
    container_name: crdbl-ipfs
    environment:
      IPFS_PROFILE: server
    volumes:
      - ./data/ipfs:/data/ipfs
    restart: unless-stopped
    expose:
      - '5001' # API
      - '8080' # Gateway
    ports:
      - '4001:4001' # Swarm (tcp)
      - '4001:4001/udp'
    healthcheck:
      test: ['CMD', 'ipfs', 'id']
      interval: 10s
      timeout: 10s
      retries: 5
    labels:
      caddy: ${HOSTNAME_IPFS}
      caddy.encode: gzip zstd
      caddy.reverse_proxy: '{{upstreams 8080}}'

  api:
    image: 'crdbl/api:latest'
    container_name: crdbl-api
    build:
      context: ../..
      dockerfile: ./apps/api/Dockerfile
    restart: unless-stopped
    networks:
      - default
      - proxy
    env_file:
      - ../../apps/api/.env
    environment:
      IPFS_URL: 'http://ipfs:5001'
      NODE_ENV: production
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_URL: 'redis://redis:6379'
    expose:
      - '3001'
    depends_on:
      redis: { condition: service_healthy }
      ipfs: { condition: service_healthy }
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:3001/health']
    labels:
      caddy: ${HOSTNAME_API}
      caddy.encode: gzip zstd
      caddy.reverse_proxy: '{{upstreams 3001}}'

  web:
    image: 'crdbl/web:latest'
    container_name: crdbl-web
    build:
      context: ../..
      dockerfile: ./apps/web/Dockerfile
    restart: unless-stopped
    networks:
      - proxy
    environment:
      SERVER_LOG_LEVEL: 'info'
    labels:
      caddy: ${HOSTNAME_WEB}
      caddy.encode: gzip zstd
      caddy.reverse_proxy: '{{upstreams 80}}'

networks:
  proxy:
    external: true
